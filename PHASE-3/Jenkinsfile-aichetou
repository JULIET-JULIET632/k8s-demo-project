def gv

pipeline {
    agent any
    stages {
        stage("init") {
            steps {
                script {
                    gv = load "script.groovy"
                }
            }
        }

    tools {
        jdk 'jdk17'
        maven 'Maven'
    }
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
    }
    stages {
        stage ('Git Checkout') {
            steps {
                git branch: 'main', crendentialsId: 'github-cred', url: 'https://github.com/etechsconsulting/k8s-demo-project'
            }
        }
        stage ('compile') {
            steps {
              sh "mvn compile"
              }
            }
        stage ('Test') {
            steps {
                sh "mvn test"
            }
        }
        stage ('SonarQube Analysis') {
            steps {
              sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar projectName=k8s-demo-project projectKey=k8s-demo-project"
            }
        }
        stage ('Quality Gate') {
            steps {
              script  {
                waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
            }
        }
      }
        stage("build jar") {
            steps {
                script {
                    echo "building jar"
                    //gv.buildJar()
            }
        }
        stage ('Publish To Nexus') {
            steps {
               WithMaven(globalMavenSettingsConfig:'global-settings', jdk: 'jdk17', maven 'maven3', mavenSettingsConfig
                 sh 'mvn deploy'
               }
            }
        }
        stage ('Build & tag Docker Image') {
            steps {
               script{
                    withDockerRegistry(credentialId: 'docker-cred', toolName:'docker') {
                    sh "docker build -t ${REGISTRY}/${APP_NAME}:${IMAGE_TAG} ."
                }
            }
        }
        stage ('Docker Image Scan') {
            steps {
              sh "trivy image --format table -o trivy-image-report.html ${REGISTRY}/${APP_NAME}:${IMAGE_TAG"
            }
        }
        stage ('Push Docker Image') {
            steps {
               script {
                   withDockerRegistry(credentialId: 'docker-cred', toolName:'docker') {
                    // Login to Docker registry and push the image
                    sh "docker login -u ${REGISTRY} -p ${env.DOCKER_PASSWORD}"
                    sh "docker push ${REGISTRY}/${APP_NAME}:${IMAGE_TAG}"
                }
            }
        }
      stage ('deploy To Kubernetes') {
            input {
                message "select the environment to deploy to"
                ok "Done"
                parameters {
                    choice(name: 'one', choices: ['dev', 'staging', 'prod'], description: '')
                    choice(name: 'one', choices: ['dev', 'staging', 'prod'], description: '')      
                }
            }
            steps {
                script {
                    echo "deploying"
                    //gv.deployApp()
                }
            }
        }
        stage ('verify_deployment') {
            steps {
                withkubeConfig(cacertificate: '', clusterName: 'kubernetes', contextName: '', credentialsId; 'K8s-cred'
                    sh "kubectl get pods -n ${K8S_NAMESPACE}
                    sh "kubectl get svc -n ${K8S_NAMESPACE}
                }
            }
        }
        post {
        success {
            echo 'Deployment successful!'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}

